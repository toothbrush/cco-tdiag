imports
{
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser      (parseTree, app, arg)
import Control.Applicative  (Applicative ((<*>)), (<$>))
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

data Object
  | Line        slope :: {(Int, Int)}          len  :: {Double}
  | Makebox     dim   :: {(Double, Double)}    body :: {String}
  | Framebox    dim   :: {(Double, Double)}    body :: {String}

data Command
  | Put         pos   :: {(Double, Double)}    obj  :: Object

type Commands = [Command]

data Picture
  | Picture     dim   :: {(Double, Double)}    cmds :: Commands

-------------------------------------------------------------------------------
-- Tree instances
-------------------------------------------------------------------------------

{
instance Tree Object where
  fromTree (Line s l)     = App "Line"     [fromTree s, fromTree l]
  fromTree (Makebox d b)  = App "Makebox"  [fromTree d, fromTree b]
  fromTree (Framebox d b) = App "Framebox" [fromTree d, fromTree b]

  toTree = parseTree [ app "Line"     (Line     <$> arg <*> arg)
                     , app "Makebox"  (Makebox  <$> arg <*> arg)
                     , app "Framebox" (Framebox <$> arg <*> arg)
                     ]

instance Tree Command where
  fromTree (Put p o) = App "Put" [fromTree p, fromTree o]
  toTree = parseTree [app "Put" (Put <$> arg <*> arg)]

instance Tree Picture where
  fromTree (Picture d cs) = App "Picture" [fromTree d, fromTree cs]
  toTree = parseTree [app "Picture" (Picture <$> arg <*> arg)]
}