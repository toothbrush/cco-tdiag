imports
{
import CCO.SourcePos        (SourcePos)
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Feedback
import CCO.Picture.AG
import CCO.Diag.GeneratePictures
import CCO.Tree.Parser      (parseTree, app, arg)
import CCO.Types
import Control.Applicative  (Applicative ((<*>)), (<$>))
import Debug.Trace
}

attr Diag 
    syn typecheck   :: {(Diag, [TypeError])}
    syn thetype     :: {Ident}

attr Diag_
    syn thetype     :: {Ident} -- Ident is the "inferred type"
    syn typecheck   :: {(Diag_, [TypeError])}
    inh pos         :: {SourcePos}

sem Diag
    -- inherit
    | Diag d  .pos = @pos
    | Diag lhs.typecheck = (Diag @pos (fst @d.typecheck), snd @d.typecheck)

sem Diag_ 
  -- simple, never badly typed
    | Program     lhs.typecheck = (Program @p @l , [])
                  lhs.thetype   = @l
    | Platform    lhs.typecheck = (Platform @m, [])
                  lhs.thetype   = @m
    | Interpreter lhs.typecheck = (Interpreter @i @l @m, [])
                  lhs.thetype   = @l
    | Compiler    lhs.typecheck = (Compiler @c @l1 @l2 @m, [])
                  lhs.thetype   = @l2
  -- these need help.
    | Execute     lhs.typecheck = (Execute (fst @d1.typecheck) (fst @d2.typecheck)
                                           , checkExecution @lhs.pos @d1.thetype @d2.thetype
                                                ++ (snd @d1.typecheck)
                                                ++ (snd @d2.typecheck)
                                           )
                  lhs.thetype   = "execution" -- this shouldn't happen.
    | Compile     lhs.typecheck = (Compile (fst @d1.typecheck) (fst @d2.typecheck)
                                           , [] 
                                                ++ (snd @d1.typecheck)
                                                ++ (snd @d2.typecheck)
                                           )
                  lhs.thetype   = @d2.thetype

{
checkExecution :: SourcePos -> Ident -> Ident -> [TypeError]
checkExecution pos prog plat = Debug.Trace.trace ("execute " ++ prog ++ " on " ++ plat) 
                                   (if prog /= plat then 
                                      [Err pos ("Cannot execute "++ prog ++", expecting " ++ plat)] 
                                     else []
                                   )
}
