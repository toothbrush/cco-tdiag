imports
{
import CCO.SourcePos        (SourcePos)
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Feedback
import CCO.Picture.AG
import CCO.Diag.GeneratePictures
import CCO.Tree.Parser      (parseTree, app, arg)
import CCO.Types
import Control.Applicative  (Applicative ((<*>)), (<$>))
}

attr Diag 
    syn typecheck   :: {(Diag, [TypeError])}

attr Diag_
    syn typecheck   :: {(Diag_, [TypeError])}
    inh pos :: {SourcePos}

sem Diag
    -- inherit
    | Diag d  .pos = @pos
    | Diag lhs.typecheck = (Diag @pos (fst @d.typecheck), snd @d.typecheck)

sem Diag_ 
  -- simple, never badly typed
    | Program     lhs.typecheck = (Program @p @l , [])
    | Platform    lhs.typecheck = (Platform @m, [])
    | Interpreter lhs.typecheck = (Interpreter @i @l @m, [])
    | Compiler    lhs.typecheck = (Compiler @c @l1 @l2 @m, [])
  -- these need help.
    | Execute     lhs.typecheck = (Execute (fst @d1.typecheck) (fst @d2.typecheck), [])
    | Compile     lhs.typecheck = (Compile (fst @d1.typecheck) (fst @d2.typecheck), [])

