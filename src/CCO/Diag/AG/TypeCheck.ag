imports
{
import CCO.SourcePos        (SourcePos)
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Feedback
import CCO.Picture.AG
import CCO.Diag.GeneratePictures
import CCO.Tree.Parser      (parseTree, app, arg)
import CCO.Types
import Control.Applicative  (Applicative ((<*>)), (<$>))
import Debug.Trace
}

attr Diag 
    syn typecheck   :: {(Diag, [TypeError])}
    syn thetype     :: {Func}
    syn category    :: {Ident}

attr Diag_
    syn thetype     :: {Func} -- Ident is the "inferred type"
    syn typecheck   :: {(Diag_, [TypeError])}
    syn category    :: {Ident}
    inh pos         :: {SourcePos}

sem Diag
    -- inherit
    | Diag d  .pos = @pos
    | Diag lhs.category = @d.category
    | Diag lhs.typecheck = (Diag @pos (fst @d.typecheck), snd @d.typecheck)

sem Diag_ 
  -- simple, never badly typed
    | Program     lhs.typecheck = (Program @p @l , [])
                  lhs.thetype   = ("",@l)
                  lhs.category  = "program"
    | Platform    lhs.typecheck = (Platform @m, [])
                  lhs.thetype   = ("", @m)
                  lhs.category  = "platform"
    | Interpreter lhs.typecheck = (Interpreter @i @l @m, [])
                  lhs.thetype   = (@l, @m)
                  lhs.category  = "interpreter"
    | Compiler    lhs.typecheck = (Compiler @c @l1 @l2 @m, [])
                  lhs.thetype   = (@l1, @l2)
                  lhs.category  = "compiler"
  -- these need help.
    | Execute     lhs.typecheck = (Execute (fst @d1.typecheck) (fst @d2.typecheck)
                                           , checkExecution @lhs.pos @d1.thetype @d2.thetype
                                                ++ checkPlatform @lhs.pos @d1.category @d2.category
                                                ++ (snd @d1.typecheck)
                                                ++ (snd @d2.typecheck)
                                           )
                  lhs.thetype   = ("prog", "execution") -- this shouldn't happen.
                  lhs.category  = "execute"
    | Compile     lhs.typecheck = (Compile (fst @d1.typecheck) (fst @d2.typecheck)
                                           , checkCompilation @lhs.pos @d1.thetype @d2.thetype
                                                ++ checkPlatformCompile @lhs.pos @d1.category @d2.category
                                                ++ (snd @d1.typecheck)
                                                ++ (snd @d2.typecheck)
                                           )
                  lhs.thetype   = ("", snd @d2.thetype) -- return the type of the compiler's output.
                  lhs.category  = "compile"

{
checkCompilation :: SourcePos -> Func -> Func -> [TypeError]
checkCompilation pos (from1, to1) (from2, to2) = 
                               if to1 /= from2 then 
                                  [Err pos ("Cannot compile "++ to1 ++", compiler expecting " ++ from2)] 
                                 else []

checkExecution :: SourcePos -> Func -> Func -> [TypeError]
checkExecution pos (from1,to1) (from2,to2) = 
                               if to1 /= from2 then 
                                  [Err pos ("Cannot execute "++ to1 ++", expecting " ++ from2)] 
                                 else []

checkPlatformCompile :: SourcePos -> Ident -> Ident -> [TypeError]
checkPlatformCompile pos d1 d2 = concat 
                          [ if d1 == "platform" then [Err pos "Cannot compile a platform"]    else []
                          , if d2 == "program"  then [Err pos "Cannot compile with a program"]  else []
                          , if d2 == "platform" then [Err pos "Cannot compile with a platform"] else []
                          , if d2 == "interpreter" then [Err pos "Cannot compile with an interpreter"] else []
                          ]
checkPlatform :: SourcePos -> Ident -> Ident -> [TypeError]
checkPlatform pos d1 d2 = concat 
                          [ if d1 == "platform" then [Err pos "Cannot execute a platform"]    else []
                          , if d2 == "program"  then [Err pos "Cannot execute on a program"]  else []
                          , if d2 == "compiler" then [Err pos "Cannot execute on a compiler"] else []
                          ]
}
