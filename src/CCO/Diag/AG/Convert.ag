imports
{
import CCO.SourcePos        (SourcePos)
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Picture
import CCO.Picture.AG
import CCO.Tree.Parser      (parseTree, app, arg)
import Control.Applicative  (Applicative ((<*>)), (<$>))
}

attr Diag 
    syn toPicture :: Picture
    inh size :: {(Double, Double)}
    inh origin :: {(Double, Double)}



attr Diag_
    syn toPicture :: Commands
    inh size      :: {(Double, Double)}
    inh origin    :: {(Double, Double)}

sem Diag
    | Diag lhs.toPicture = Picture @lhs.size @d.toPicture

sem Diag_ 
  -- simple 
    | Program     lhs.toPicture = program @lhs.origin @p @l
    | Platform    lhs.toPicture = [] 
    | Interpreter lhs.toPicture = [] 
    | Compiler    lhs.toPicture = [] 
  -- less simple
    | Execute     lhs.toPicture = [] 
    | Compile     lhs.toPicture = [] 

--sem Diag_ 
--  -- simple 
--    | Program     lhs.size = head (map sz @lhs.toPicture)
--


{

sz :: Command -> (Double, Double)
sz (Put _ o) = szO o
            where szO (Line _ len)   = (len, len)
                  szO (Makebox d _)  = d
                  szO (Framebox d _) = d

program :: (Double,Double) -> Ident -> Ident -> Commands
program (x,y) p l = 
              [ Put (x+7.5, y+20) (Line ( 1, 0) 50)
              , Put (x+7.5, y+20) (Line ( 0, 1) 15)
              , Put (x+7.5, y+35) (Line (-1, 2) 7.5)
              , Put (x+57.5,y+35) (Line ( 1, 2) 7.5)
              , Put (x+57.5,y+20) (Line ( 0, 1) 15)
              , Put (x+  0, y+50) (Line ( 1, 0) 65)
              , Put (x+7.5, y+35) (Makebox (50,15) p)
              , Put (x+7.5, y+20) (Makebox (50,15) l)
              ]

}

--    | Program      p  :: {Ident}  l  :: {Ident}
--    | Platform     m  :: {Ident}
--    | Interpreter  i  :: {Ident}  l  :: {Ident}  m  :: {Ident}
--    | Compiler     c  :: {Ident}  l1 :: {Ident}  l2 :: {Ident}  m :: {Ident}
--    | Execute      d1 :: Diag     d2 :: Diag
--    | Compile      d1 :: Diag     d2 :: Diag



-- 
-- -------------------------------------------------------------------------------
-- -- Syntax
-- -------------------------------------------------------------------------------
-- 
-- data Object
--   | Line        slope :: {(Int, Int)}          len  :: {Double}
--   | Makebox     dim   :: {(Double, Double)}    body :: {String}
--   | Framebox    dim   :: {(Double, Double)}    body :: {String}
-- 
-- data Command
--   | Put         pos   :: {(Double, Double)}    obj  :: Object
-- 
-- type Commands = [Command]
-- 
-- data Picture
--   | Picture     dim   :: {(Double, Double)}    cmds :: Commands


